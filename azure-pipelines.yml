
trigger:
  - main
resources:
  repositories:
    - repository: k8s_agent_repo          # identifier to use in checkout
      type: github
      endpoint: 'github-repo'
      name: SOULREDOUANE/jesa-k8s-agent  # your repo name
      ref: main 
variables:
    tag: '$(Build.BuildId)'
    repositoryName: 'soulredouane/jesa-php'
    phpVersion: '8.2.27'
    k8sNamespace: 'jesa-med-ns'
    jobName: 'azp-agent-job'
    sonarHostUrl: 'http://sonarqube-sonarqube-lts.sonarqube.svc.cluster.local:9000'  # Fully qualified SonarQube service URL
    sonarToken: '95ed008304496205800ee04653a3189e62c3b9db'
    TRIVY_SERVICE_URL: 'http://trivy-service.trivy.svc.cluster.local:5000/scan'
stages: 
  - stage: Setup_Custom_Agent
    jobs:
    - job: CreateK8sAgent
      # pool:
      #   vmImage: 'ubuntu-latest'  # Start with Microsoft-hosted agent
      pool:
        name: 'default'
        demands:
          - agent.name -equals always-agent
      steps:
      - checkout: k8s_agent_repo
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            kubectl apply -f $(System.DefaultWorkingDirectory)/k8s_manifests/agent-job.yml
      # Wait for agent to be ready
      - bash: |
          MAX_RETRIES=45
          RETRY_INTERVAL=10
          for ((i=1; i<=MAX_RETRIES; i++)); do
            RUNNING=$(kubectl get job $(jobName) -n $(k8sNamespace) -o jsonpath='{.status.active}')
            if [ "$RUNNING" == "1" ]; then
              echo "Agent is running!"
              exit 0
            fi
            echo "Waiting for agent to be ready... Attempt $i/$MAX_RETRIES"
            sleep $RETRY_INTERVAL
          done
          echo "Warning: Agent readiness check timed out, but continuing anyway..."
          exit 0  # Exit with success even if timeout
        displayName: 'Wait for K8s agent to be ready'

  - stage: Build_And_Test
    # dependsOn: Setup_Custom_Agent
    jobs:
      
      - job: BuildTest
        pool:
          name: 'default'
          demands:
            #  - agent.name -equals dockeragent-docker-agent
            - agent.name -equals jesa-med-job-agent
        steps:
          # - script: |
          #     sonar-scanner \
          #       -Dsonar.projectKey=azure-devops \
          #       -Dsonar.sources=. \
          #       -Dsonar.host.url=$(sonarHostUrl) \
          #       -Dsonar.login=$(sonarToken) \
          #       > sonar-scan-output.txt 2>&1
          #   displayName: 'Run SonarQube Scan'
          # Publish scan output as an artifact
          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     pathToPublish: 'sonar-scan-output.txt'
          #     artifactName: 'SonarQubeScanResults'
          #     publishLocation: 'Container'
          #   displayName: 'Publish SonarQube Scan Output'

          - task: Docker@2
            displayName: 'Build Docker Image'
            inputs:
              command: build
              repository: $(repositoryName)
              dockerfile: '**/Dockerfile'
              containerRegistry: dockerhub-registry
              tags: |
                $(tag)

          # - script: |
          #     docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 0 --no-progress --format json $(repositoryName):$(tag) > trivy-scan-result.json
          #   displayName: 'Scan Docker Image with Trivy CLI'

          # Publish Trivy scan results as an artifact
          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     pathToPublish: 'trivy-scan-result.json'
          #     artifactName: 'TrivyScanResult'
          #     publishLocation: 'Container'
          #   displayName: 'Publish Trivy Scan Result'

         
          - task: Docker@2
            displayName: 'Push Docker Image'
            inputs:
              command: push
              repository: $(repositoryName)
              containerRegistry: dockerhub-registry
              tags: |
                $(tag)
                
  - stage: Deploy
    # dependsOn: Build_And_Test
    # condition: succeeded()
    jobs:
      - job: DeployToDev
        pool:
          name: 'default'
          demands:
            - agent.name -equals  dockeragent-soul-agent
        steps:
          - task: SSH@0
            displayName: 'Deploy to Dev Server'
            inputs:
              sshEndpoint: 'jesa-med-ssh'
              runOptions: 'commands'
              commands: |
                docker pull $(repositoryName):$(tag)
                # docker stop jesa-php-container || true
                # docker rm jesa-php-container || true
                docker run -d --name jesa-php-container -p 8080:80 $(repositoryName):$(tag)